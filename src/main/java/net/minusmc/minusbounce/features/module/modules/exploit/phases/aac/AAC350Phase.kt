package net.minusmc.minusbounce.features.module.modules.exploit.phases.aac


import net.minecraft.block.BlockAir
import net.minecraft.network.play.client.C03PacketPlayer
import net.minusmc.minusbounce.event.PacketEvent
import net.minusmc.minusbounce.features.module.modules.exploit.phases.PhaseMode
import net.minusmc.minusbounce.utils.MovementUtils
import net.minusmc.minusbounce.utils.block.BlockUtils
import net.minusmc.minusbounce.utils.timer.TickTimer
import kotlin.math.cos
import kotlin.math.sin

class AAC350Phase : PhaseMode("AAC3.5.0") {

	private val tickTimer = TickTimer()

	override fun onUpdate() {
        val isInsideBlock = BlockUtils.collideBlockIntersects(mc.thePlayer.entityBoundingBox) { it !is BlockAir }

		if (isInsideBlock) {
			mc.thePlayer.noClip = true
            mc.thePlayer.motionY = 0.0
            mc.thePlayer.onGround = true
		}

		if(isPhaseable(tickTimer, isInsideBlock)) {
			tickTimer.update()
	        return
		}

	    val yaw = Math.toRadians(mc.thePlayer.rotationYaw.toDouble())
	    val x = sin(yaw)
	    val z = cos(yaw)

	    mc.thePlayer.setPosition(mc.thePlayer.posX - x, mc.thePlayer.posY, mc.thePlayer.posZ + z)
	    tickTimer.reset()
	}
	
	override fun onPacket(event: PacketEvent) {
		val packet = event.packet
		if (packet is C03PacketPlayer) {
			val yaw = MovementUtils.direction

			val x = sin(yaw) * 0.00000001
			val y = cos(yaw) * 0.00000001

            packet.x -= x
            packet.z += y
		}
	}
}

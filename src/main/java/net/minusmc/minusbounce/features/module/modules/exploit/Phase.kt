/*
 * MinusBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/MinusMC/MinusBounce
 */
package net.minusmc.minusbounce.features.module.modules.exploit

import net.minusmc.minusbounce.event.*
import net.minusmc.minusbounce.features.module.Module
import net.minusmc.minusbounce.features.module.ModuleCategory
import net.minusmc.minusbounce.features.module.ModuleInfo
import net.minusmc.minusbounce.features.module.modules.exploit.phases.PhaseMode
import net.minusmc.minusbounce.utils.ClassUtils
import net.minusmc.minusbounce.value.ListValue

@ModuleInfo(name = "Phase", description = "Allows you to walk through blocks.", category = ModuleCategory.EXPLOIT)
class Phase : Module() {
	
	val modes = ClassUtils.resolvePackage("${this.javaClass.`package`.name}.phases", PhaseMode::class.java)
        .map { it.newInstance() as PhaseMode }
        .sortedBy { it.modeName }

    private val mode: PhaseMode
        get() = modes.find { modeValue.get().equals(it.modeName) } ?: throw NullPointerException() // this should not happen

    val modeValue: ListValue = object : ListValue("Mode", modes.map { it.modeName }.toTypedArray(), "Mineplex") {
        override fun onChange(oldValue: String, newValue: String) {
            if (state) onDisable()
        }

        override fun onChanged(oldValue: String, newValue: String) {
            if (state) onEnable()
        }
    }

    override fun onInitialize() {
        modes.map { mode -> mode.values.forEach { value -> value.name = "${mode.modeName}-${value.name}" } }
    }

	override fun onEnable() {}

	override fun onDisable() {}

	@EventTarget
	fun onUpdate(event: UpdateEvent) {
		mode.onUpdate()
	}

	@EventTarget
	fun onPacket(event: PacketEvent) {
		mode.onPacket(event)
	}

	@EventTarget()
	fun onMove(event: MoveEvent) {
		mode.onMove(event)
	}
	
	@EventTarget()
	fun onPushOut(event: PushOutEvent) {
		event.cancelEvent()
	}

	@EventTarget()
	fun onJump(event: JumpEvent) {
		mode.onJump(event)
	}

	@EventTarget
	fun onBlockBB(event: BlockBBEvent) {
		mode.onBlockBB(event)
	}

	override val tag: String
        get() = modeValue.get()

    override val values = super.values.toMutableList().also {
        modes.map {
            mode -> mode.values.forEach { value ->
                val displayableFunction = value.displayableFunction
                it.add(value.displayable { displayableFunction.invoke() && modeValue.get().equals(mode.modeName) })
            }
        }
    }
}

/*
 * MinusBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/MinusMC/MinusBounce
 */
package net.minusmc.minusbounce.features.module.modules.exploit

import net.minusmc.minusbounce.event.EventTarget
import net.minusmc.minusbounce.event.PacketEvent
import net.minusmc.minusbounce.event.UpdateEvent
import net.minusmc.minusbounce.features.module.Module
import net.minusmc.minusbounce.features.module.ModuleCategory
import net.minusmc.minusbounce.features.module.ModuleInfo
import net.minusmc.minusbounce.value.BoolValue
import net.minusmc.minusbounce.value.IntegerValue
import net.minecraft.network.play.server.*

@ModuleInfo(name = "AntiExploit", spacedName = "Anti Exploit", description = "Prevent servers from doing certain harmful things.", category = ModuleCategory.MISC, array = false)
object AntiExploit : Module() {
    init {
        state = true
    }

    private val guardianValue = BoolValue("LessGuardian", true)
    private val maxArrowSpawn = IntegerValue("MaxArrowPerSecond", 100, 50, 1000)

    private var tick = 0
    private var arrowMax = 0
    private var guardianEffect = false

    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet

        if (mc.thePlayer != null && mc.theWorld != null && packet is S0FPacketSpawnMob && mc.theWorld.loadedEntityList.size > 500) {
            event.cancelEvent()
        }

        if (packet is S08PacketPlayerPosLook) {
            if (Math.abs(packet.x) > 3.0E7 || Math.abs(packet.y) > 3.0E7 || Math.abs(packet.z) > 3.0E7) {
                event.cancelEvent()
            }
        }

        if (packet is S2APacketParticles) {
            if (packet.getParticleCount() > 1024) {
                event.cancelEvent()
            }
        }

        if (packet is S27PacketExplosion) {
            if (Math.abs(packet.func_149149_c()) > 100.0 || Math.abs(packet.func_149144_d()) > 100.0 || Math.abs(packet.func_149147_e()) > 100.0) {
                event.cancelEvent()
            }
        }

        if (packet is S2BPacketChangeGameState) {
            when(packet.gameState) {
                5 -> {
                    if(!mc.isDemo) {
                        event.cancelEvent()
                    }
                }
                10 -> {
                    if(guardianValue.get()) {
                        if (!guardianEffect) {
                            guardianEffect = true
                        } else {
                            event.cancelEvent()
                        }
                    }

                }
            }
        }

        if (packet is S0EPacketSpawnObject && packet.type == 60) {
            if (arrowMax++ > maxArrowSpawn.get()) {
                event.cancelEvent()
            }
        }
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        if (tick++ >= 20) {
            tick = 0
            arrowMax = 0
            guardianEffect = false
        }
    }

}
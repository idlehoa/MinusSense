package net.minusmc.minusbounce.features.module.modules.exploit.disablers.verus


import net.minusmc.minusbounce.features.module.modules.exploit.disablers.DisablerMode
import net.minusmc.minusbounce.event.PacketEvent
import net.minusmc.minusbounce.utils.PacketUtils
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import net.minecraft.network.play.client.C03PacketPlayer.C06PacketPlayerPosLook

import java.util.LinkedList
import kotlin.math.sqrt
import java.lang.Math.round

class OldVerusDisabler : DisablerMode("OldVerus") {

	private val packetQueue = LinkedList<C0FPacketConfirmTransaction>()

	override fun onEnable() {
		packetQueue.clear()
	}

	override fun onDisable() {
		packetQueue.clear()
	}

	override fun onWorld() {
		packetQueue.clear()
	}

	override fun onUpdate() {
		if (mc.thePlayer.ticksExisted % 180 == 0) {
			while (packetQueue.size > 22) {
				PacketUtils.sendPacketNoEvent(packetQueue.poll())
			}
			debug("pushed queue until size < 22.")
		} 
	}

	override fun onPacket(event: PacketEvent) {
		val packet = event.packet
		if (packet is C03PacketPlayer) {
			val yPos = round(mc.thePlayer.posY / 0.015625) * 0.015625
			mc.thePlayer.setPosition(mc.thePlayer.posX, yPos, mc.thePlayer.posZ)

			if (mc.thePlayer.ticksExisted % 45 == 0) {
				debug("flag")
				PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
    			PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 11.725, mc.thePlayer.posZ, false))
    			PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
			}
		}

		if (packet is S08PacketPlayerPosLook) {
			if (mc.thePlayer == null || mc.thePlayer.ticksExisted <= 0) return

            val x = packet.getX() - mc.thePlayer.posX
            val y = packet.getY() - mc.thePlayer.posY
            val z = packet.getZ() - mc.thePlayer.posZ
            val diff = sqrt(x * x + y * y + z * z)
			if (diff <= 8) {
				event.cancelEvent()
				PacketUtils.sendPacketNoEvent(C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), true))

				debug("silent s08 accept")
			}
		}

		if (packet is C0FPacketConfirmTransaction && !isInventory(packet.uid)) {
			repeat (4) {
				packetQueue.add(packet)
			}
			event.cancelEvent()
			debug("c0f dupe: 4x")
		}
	}
}

package net.minusmc.minusbounce.features.module.modules.exploit.disablers.spartan


import net.minusmc.minusbounce.features.module.modules.exploit.disablers.DisablerMode
import net.minusmc.minusbounce.event.PacketEvent
import net.minusmc.minusbounce.utils.PacketUtils
import net.minusmc.minusbounce.utils.timer.MSTimer
import net.minecraft.network.play.client.C00PacketKeepAlive
import net.minecraft.network.play.client.C0FPacketConfirmTransaction

class SpartanCombatDisabler : DisablerMode("SpartanCombat") {

	private val keepAlives = arrayListOf<C00PacketKeepAlive>()
	private val transactions = arrayListOf<C0FPacketConfirmTransaction>()

	private val msTimer = MSTimer()

	override fun onEnable() {
		keepAlives.clear()
		transactions.clear()
		msTimer.reset()
	}

	override fun onDisable() {
		keepAlives.forEach {PacketUtils.sendPacketNoEvent(it)}
		transactions.forEach {PacketUtils.sendPacketNoEvent(it)}
		msTimer.reset()
	}

	override fun onWorld() {
		keepAlives.clear()
		transactions.clear()
		msTimer.reset()
	}

	override fun onUpdate() {
		if (msTimer.hasTimePassed(3000L) && keepAlives.size > 0 && transactions.size > 0) {
			PacketUtils.sendPacketNoEvent(keepAlives[keepAlives.size - 1])
			PacketUtils.sendPacketNoEvent(transactions[transactions.size - 1])

			debug("c00 no.${keepAlives.size - 1} sent.")
			debug("c0f no.${transactions.size - 1} sent.")
			keepAlives.clear()
			transactions.clear()
			msTimer.reset()
		}
	}

	override fun onPacket(event: PacketEvent) {
		val packet = event.packet
		if (packet is C00PacketKeepAlive && (keepAlives.size <= 0 || packet != keepAlives[keepAlives.size - 1])) {
			debug("c00 added")
    		keepAlives.add(packet)
    		event.cancelEvent()
		}
		if (packet is C0FPacketConfirmTransaction && (transactions.size <= 0 || packet != transactions[transactions.size - 1])) {
			debug("c0f added")
    		transactions.add(packet)
    		event.cancelEvent()
		}
	}
}

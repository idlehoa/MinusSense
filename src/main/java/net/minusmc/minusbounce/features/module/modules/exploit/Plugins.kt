/*
 * MinusBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/MinusMC/MinusBounce
 */
package net.minusmc.minusbounce.features.module.modules.exploit

import joptsimple.internal.Strings
import net.minusmc.minusbounce.event.EventTarget
import net.minusmc.minusbounce.event.PacketEvent
import net.minusmc.minusbounce.event.UpdateEvent
import net.minusmc.minusbounce.value.IntegerValue
import net.minusmc.minusbounce.features.module.Module
import net.minusmc.minusbounce.features.module.ModuleCategory
import net.minusmc.minusbounce.features.module.ModuleInfo
import net.minusmc.minusbounce.utils.ClientUtils
import net.minusmc.minusbounce.utils.timer.MSTimer
import net.minecraft.network.play.client.C14PacketTabComplete
import net.minecraft.network.play.server.S3APacketTabComplete

@ModuleInfo(name = "Plugins", description = "Allows you to see which plugins the server is using.", category = ModuleCategory.EXPLOIT)
class Plugins: Module() {
    private val delay = IntegerValue("TimeoutDelay", 1000, 1000, 20000)
    private val timer = MSTimer()

    override fun onEnable() {
        if(mc.thePlayer == null) return

        mc.netHandler.addToSendQueue(C14PacketTabComplete("/"))
        timer.reset()
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        if(timer.hasTimePassed(delay.get().toLong())) {
            ClientUtils.displayChatMessage("§cTimed out.")
            timer.reset()
            state = false
        }
    }

    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if(packet is S3APacketTabComplete) {
            val plugins: MutableList<String> = ArrayList()
            val commands = packet.func_149630_c()
            for (command1 in commands) {
                val command = command1.split(":").toTypedArray()
                if (command.size > 1) {
                    val pluginName = command[0].replace("/", "")
                    if(!plugins.contains(pluginName)) plugins.add(pluginName)
                }
            }

            plugins.sort()

            if(plugins.isNotEmpty())
                ClientUtils.displayChatMessage("§aPlugins §7(§8" + plugins.size + "§7): §c" + Strings.join(plugins.toTypedArray(), "§7, §c"))
            else
                ClientUtils.displayChatMessage("§cNo plugins found.")
            state = false
            timer.reset()
        }
    }

}

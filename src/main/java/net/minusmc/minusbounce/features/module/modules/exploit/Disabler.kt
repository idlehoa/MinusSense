/*
 * MinusBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge.
 * https://github.com/MinusMC/MinusBounce
 */
package net.minusmc.minusbounce.features.module.modules.exploit

import net.minusmc.minusbounce.event.*
import net.minusmc.minusbounce.features.module.Module
import net.minusmc.minusbounce.features.module.ModuleCategory
import net.minusmc.minusbounce.features.module.ModuleInfo
import net.minusmc.minusbounce.features.module.modules.exploit.disablers.DisablerMode
import net.minusmc.minusbounce.utils.ClassUtils
import net.minusmc.minusbounce.utils.MovementUtils
import net.minusmc.minusbounce.value.BoolValue
import net.minusmc.minusbounce.value.ListValue

@ModuleInfo(name = "Disabler", description = "Disable some anticheats' checks.", category = ModuleCategory.EXPLOIT)
class Disabler: Module() {
	val modes = ClassUtils.resolvePackage("${this.javaClass.`package`.name}.disablers", DisablerMode::class.java)
        .map { it.newInstance() as DisablerMode }
        .sortedBy { it.modeName }

    val mode: DisablerMode
        get() = modes.find { modeValue.get().equals(it.modeName, true) }
            ?: throw NullPointerException() // this should not happen

    private val modeValue: ListValue = object : ListValue("Mode", modes.map { it.modeName }.toTypedArray(), "PingSpoof") {
        override fun onChange(oldValue: String, newValue: String) {
            if (state) onDisable()
        }

        override fun onChanged(oldValue: String, newValue: String) {
            if (state) onEnable()
        }
    }

	val debugValue = BoolValue("Debug", false)

	override fun onInitialize() {
		modes.map { mode -> mode.values.forEach { value -> value.name = "${mode.modeName}-${value.name}" } }
	}

	override fun onEnable() {}

	override fun onDisable() {
		mc.thePlayer.motionY = 0.0
		MovementUtils.strafe(0F)
		mc.timer.timerSpeed = 1F
	}

	@EventTarget
	fun onWorld(event: WorldEvent) {
		mode.onWorld()
	}

	@EventTarget
	fun onRender2D(event: Render2DEvent) {
		mode.onRender2D(event)
	}

	@EventTarget
	fun onPacket(event: PacketEvent) {
		mode.onPacket(event)
	}

	@EventTarget(priority = 2)
	fun onMotion(event: MotionEvent) {
		mode.onMotion(event)
		
	}
	
	@EventTarget
	fun onUpdate(event: UpdateEvent) {
		mode.onUpdate()
	}

	override val tag: String
        get() = modeValue.get()

    override val values = super.values.toMutableList().also {
        modes.map {
            mode -> mode.values.forEach { value ->
                val displayableFunction = value.displayableFunction
            it.add(value.displayable { displayableFunction.invoke() && modeValue.get().equals(mode.modeName, true) })
            }
        }
    }
}

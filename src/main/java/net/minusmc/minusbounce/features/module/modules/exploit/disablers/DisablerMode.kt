package net.minusmc.minusbounce.features.module.modules.exploit.disablers

import net.minusmc.minusbounce.MinusBounce
import net.minusmc.minusbounce.event.*
import net.minusmc.minusbounce.utils.MinecraftInstance
import net.minusmc.minusbounce.features.module.modules.exploit.Disabler
import net.minusmc.minusbounce.value.Value
import net.minusmc.minusbounce.utils.ClassUtils
import net.minusmc.minusbounce.utils.ClientUtils
import net.minecraft.init.Items


abstract class DisablerMode(val modeName: String): MinecraftInstance() {
	protected val prefix = "${modeName}-"

	protected val disabler: Disabler
		get() = MinusBounce.moduleManager[Disabler::class.java]!!

	open val values: List<Value<*>>
		get() = ClassUtils.getValues(this.javaClass, this)

	open fun shouldRun(): Boolean = mc.thePlayer != null && mc.thePlayer.inventory != null && !mc.thePlayer.inventory.hasItem(Items.compass) && mc.thePlayer.ticksExisted > 5

	open fun isMoving(): Boolean = (mc.thePlayer != null && (mc.thePlayer.movementInput.moveForward != 0F || mc.thePlayer.movementInput.moveStrafe != 0F || mc.thePlayer.movementInput.sneak || mc.thePlayer.movementInput.jump))

    open fun isInventory(action: Short): Boolean = action in 1..99

	open fun debug(s: String, force: Boolean = false) {
		if (disabler.debugValue.get() || force)
			ClientUtils.displayChatMessage("§7[§3§lDisabler§7]§f $s")
	}

	open fun onEnable() {}

	open fun onDisable() {}

	open fun onWorld() {}

    open fun onUpdate() {}
    open fun onPacket(event: PacketEvent) {}
    open fun onJump(event: JumpEvent) {}
    open fun onMotion(event: MotionEvent) {}
    open fun onRender2D(event: Render2DEvent) {}
}

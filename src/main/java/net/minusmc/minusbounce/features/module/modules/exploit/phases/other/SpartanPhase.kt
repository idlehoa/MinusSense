package net.minusmc.minusbounce.features.module.modules.exploit.phases.other

import net.minecraft.block.BlockAir
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import net.minusmc.minusbounce.features.module.modules.exploit.phases.PhaseMode
import net.minusmc.minusbounce.utils.block.BlockUtils
import net.minusmc.minusbounce.utils.timer.TickTimer
import kotlin.math.cos
import kotlin.math.sin


class SpartanPhase : PhaseMode("Spartan") {
	private val tickTimer = TickTimer()
	override fun onUpdate() {
        val isInsideBlock = BlockUtils.collideBlockIntersects(mc.thePlayer.entityBoundingBox) { it !is BlockAir }

        if (isInsideBlock) {
			mc.thePlayer.noClip = true
            mc.thePlayer.motionY = 0.0
            mc.thePlayer.onGround = true
		}

		if(!mc.thePlayer.onGround || isPhaseable(tickTimer, isInsideBlock)) {
			tickTimer.update()
			return
		}
            
        mc.netHandler.addToSendQueue(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
        mc.netHandler.addToSendQueue(C04PacketPlayerPosition(0.5, 0.0, 0.5, true))
        mc.netHandler.addToSendQueue(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
        mc.netHandler.addToSendQueue(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 0.2, mc.thePlayer.posZ, true))
        mc.netHandler.addToSendQueue(C04PacketPlayerPosition(0.5, 0.0, 0.5, true))
        mc.netHandler.addToSendQueue(C04PacketPlayerPosition(mc.thePlayer.posX + 0.5, mc.thePlayer.posY, mc.thePlayer.posZ + 0.5, true))
        val yaw = Math.toRadians(mc.thePlayer.rotationYaw.toDouble())
        val x = sin(yaw) * 0.04
        val z = cos(yaw) * 0.04
        mc.thePlayer.setPosition(mc.thePlayer.posX - x, mc.thePlayer.posY, mc.thePlayer.posZ + z)
        tickTimer.reset()
	}
}


